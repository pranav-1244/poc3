---
- name: Jenkins Pipeline Setup with SonarQube Integration
  hosts: all
  become: true
  tasks:
    # Step 1: Create SonarQube Project
    - name: Create a SonarQube project
      uri:
        url: "{{ sonarqube_url }}/api/projects/create"
        method: POST
        user: "{{ sonarqube_admin }}"
        password: "{{ sonarqube_password }}"
        body_format: form-urlencoded
        body:
          project: "{{ sonarqube_project_key }}"
          name: "{{ sonarqube_project_name }}"
        status_code: 200
      register: project_creation_result

    # Step 2: Set SonarQube global base URL
    - name: Set SonarQube global base URL
      uri:
        url: "{{ sonarqube_url }}/api/settings/set"
        method: POST
        user: "{{ sonarqube_admin }}"
        password: "{{ sonarqube_password }}"
        body_format: form-urlencoded
        body:
          key: "sonar.core.serverBaseURL"
          value: "{{ sonarqube_base_url }}"
        status_code: 204
      register: base_url_result

    # Step 3: Generate SonarQube Token
    - name: Generate SonarQube token for Jenkins
      uri:
        url: "{{ sonarqube_url }}/api/user_tokens/generate"
        method: POST
        user: "{{ sonarqube_admin }}"
        password: "{{ sonarqube_password }}"
        body_format: form-urlencoded
        body:
          name: "{{ sonarqube_token_name }}"
        status_code: 200
      register: token_generation_result

    - name: Extract generated SonarQube token
      set_fact:
        sonarqube_token: "{{ token_generation_result.json.token }}"

    # Step 4: Add the SonarQube token to Jenkins as a secret text credential
    - name: Get Jenkins crumb (CSRF protection token)
      uri:
        url: "{{ jenkins_url }}/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_username }}"
        password: "{{ jenkins_password }}"
        status_code: 200
      register: crumb_data

    - name: Add SonarQube token to Jenkins as secret text credential
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_username }}"
        password: "{{ jenkins_password }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Jenkins-Crumb: "{{ crumb_data.json.crumb }}"
        body_format: form-urlencoded
        body: |
          json={
            "": "0",
            "credentials": {
              "scope": "GLOBAL",
              "id": "{{ jenkins_credentials_id }}",
              "secret": "{{ sonarqube_token }}",
              "description": "SonarQube token for Jenkins",
              "stapler-class": "org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl",
              "$class": "org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl"
            }
          }
        status_code: 200

    - name: Confirm Jenkins credential creation
      debug:
        msg: "SonarQube token has been successfully added to Jenkins as a secret text credential."
