---
- name: Setup SonarQube using curl
  hosts: server
  become: yes
  vars:
    sonarqube_url: "http://localhost:9000"
    sonarqube_port: 9000
    sonarqube_default_password: "admin"
    sonarqube_new_password: "1234"
    sonarqube_admin_login: "admin"
    sonarqube_password: "1234"
    sonarqube_project_key: "my_project"
    sonarqube_project_name: "My SonarQube Project"
    sonarqube_token_name: "jenkins_token"
    sonarqube_base_url: "http://localhost:9000"
    quality_gate_name: "Sonar way"  # Name of the quality gate
    jenkins_credentials_file: "/credentials.txt"  # Path to store Jenkins credentials

  tasks:
    - name: Ensure Docker is started
      service:
        name: docker
        state: started

    - name: Check if SonarQube container is already running
      shell: docker ps -q -f name=sonarqube_container
      register: sonarqube_running
      ignore_errors: true

    - name: Stop and remove existing SonarQube container if it exists
      shell: |
        docker stop sonarqube_container && docker rm sonarqube_container
      when: sonarqube_running.stdout != ""

    - name: Pull SonarQube Docker image
      shell: docker pull sonarqube:latest
      register: pull_image_output

    - name: Debug image pull result
      debug:
        var: pull_image_output.stdout

    - name: Run SonarQube Docker container
      shell: docker run -d --name sonarqube_container -p 9000:9000 sonarqube
      register: run_container_output

    - name: Debug container run result
      debug:
        var: run_container_output.stdout

    - name: Wait for SonarQube to be fully operational
      shell: |
        for i in $(seq 1 50); do
          status=$(curl -s {{ sonarqube_url }}/api/system/status | grep -o '"status":"UP"')
          if [ "$status" = '"status":"UP"' ]; then
            echo "SonarQube is operational"
            exit 0
          else
            echo "SonarQube not ready, retrying in 15 seconds (attempt $i/50)..."
            sleep 15
          fi
        done
        exit 1
      register: sonarqube_status
      retries: 100
      delay: 15
      ignore_errors: yes

    - name: Debug the SonarQube status result
      debug:
        var: sonarqube_status

    - name: Fail if SonarQube did not fully start
      fail:
        msg: "SonarQube failed to start."
      when: sonarqube_status.rc != 0

    - name: Change admin password
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/users/change_password"
        method: POST
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_default_password }}"
        force_basic_auth: yes
        body: "login={{ sonarqube_admin_login }}&previousPassword={{ sonarqube_default_password }}&password={{ sonarqube_new_password }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        status_code: [200, 204]
      no_log: true

    - name: Create SonarQube project
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/projects/create?project={{ sonarqube_project_key }}&name={{ sonarqube_project_name | urlencode }}"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
      register: project_response  

    - name: Generate user token
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/user_tokens/generate"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
        body: "name={{ sonarqube_token_name }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: token_response
    
    - name: Set the default quality gate
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/qualitygates/set_as_default"
        user: "{{ sonarqube_admin_login }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
        body: "name={{ quality_gate_name | urlencode }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: quality_gate_response
      failed_when: quality_gate_response.status not in [200, 204]

    - name: Store SonarQube credentials as a JSON file on the Ansible control machine
      delegate_to: localhost
      copy:
        dest: "/home/pranav1244/poc3/sonarqube_credentials.json"
        content: |
          {
            "SONAR_PROJECT_KEY": "{{ sonarqube_project_key }}",
            "SONAR_TOKEN": "{{ token_response.json.token }}",
            
          }
        mode: '0644'

    - name: Load SonarQube credentials from JSON file
      set_fact:
        sonarqube_credentials: "{{ lookup('file', '/home/pranav1244/poc3/sonarqube_credentials.json') | from_json }}"

    - name: Use the SonarQube project key and token
      debug:
        msg: "Project Key: {{ sonarqube_credentials.SONAR_PROJECT_KEY }}, Token: {{ sonarqube_credentials.SONAR_TOKEN }}"
